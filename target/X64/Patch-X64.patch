--- a/feeds/luci/modules/luci-base/root/usr/share/rpcd/ucode/luci
+++ b/feeds/luci/modules/luci-base/root/usr/share/rpcd/ucode/luci
@@ -547,7 +547,10 @@ const methods = {
 
 	getCPUInfo: {
 		call: function() {
-			return { result: popen('top -n1 | awk \'/^CPU/ {printf("%d%",100-$8)}\'').read('all') };
+			let rv = {};
+			rv.cpufreq = popen('echo $(grep MHz /proc/cpuinfo | cut -c11- | sed -n 1p) MHz $( (sensors | grep "Core 0" || sensors | grep temp1) | cut -c12-)').read('all');
+			rv.cpufree = popen('top -n1 | awk \'/^CPU/ {printf("%d%",100-$8)}\'').read('all');
+			return rv;
 		}
 	},
 
--- a/feeds/luci/modules/luci-mod-status/htdocs/luci-static/resources/view/status/include/10_system.js
+++ b/feeds/luci/modules/luci-mod-status/htdocs/luci-static/resources/view/status/include/10_system.js
@@ -89,8 +89,8 @@ return baseclass.extend({
 		var fields = [
 			_('Hostname'),         boardinfo.hostname,
 			_('Model'),            boardinfo.model,
-			_('Architecture'),     boardinfo.system,
 			_('Target Platform'),  (L.isObject(boardinfo.release) ? boardinfo.release.target : ''),
+			_('CPU Info'),         cpuinfo.cpufreq,
 			_('Firmware Version'), (L.isObject(boardinfo.release) ? boardinfo.release.description + ' / ' : '') + (luciversion || ''),
 			_('Kernel Version'),   boardinfo.kernel,
 			_('Local Time'),       datestr,
@@ -100,7 +100,7 @@ return baseclass.extend({
 				systeminfo.load[1] / 65535.0,
 				systeminfo.load[2] / 65535.0
 			) : null,
-			_('CPU usage (%)'),    cpuinfo.result
+			_('CPU usage (%)'),    cpuinfo.cpufree
 		];
 
 		var table = E('table', { 'class': 'table' });
--- a/package/firmware/intel-microcode/Makefile
+++ b/package/firmware/intel-microcode/Makefile
@@ -38,15 +38,15 @@
 endef
 
 define Build/Compile
+	rm -f $(PKG_BUILD_DIR)/intel-ucode.cpio
 	IUCODE_TOOL=$(STAGING_DIR)/../host/bin/iucode_tool $(MAKE) -C $(PKG_BUILD_DIR)
-	mkdir $(PKG_BUILD_DIR)/intel-ucode-ipkg
-	$(STAGING_DIR)/../host/bin/iucode_tool -q \
-		--write-firmware=$(PKG_BUILD_DIR)/intel-ucode-ipkg $(PKG_BUILD_DIR)/$(MICROCODE).bin
+	$(STAGING_DIR)/../host/bin/iucode_tool -q --mini-earlyfw \
+		--write-earlyfw=$(PKG_BUILD_DIR)/intel-ucode.cpio $(PKG_BUILD_DIR)/$(MICROCODE).bin
 endef
 
 define Package/intel-microcode/install
-	$(INSTALL_DIR) $(1)/lib/firmware/intel-ucode
-	$(INSTALL_DATA) $(PKG_BUILD_DIR)/intel-ucode-ipkg/* $(1)/lib/firmware/intel-ucode
+	$(INSTALL_DIR) $(1)/boot
+	$(INSTALL_DATA) $(PKG_BUILD_DIR)/intel-ucode.cpio $(1)/boot/intel-ucode.img
 endef
 
 $(eval $(call BuildPackage,intel-microcode))
--- a/package/firmware/linux-firmware/amd.mk
+++ b/package/firmware/linux-firmware/amd.mk
@@ -1,9 +1,11 @@
 Package/amd64-microcode = $(call Package/firmware-default,AMD64 CPU microcode,,LICENSE.amd-ucode)
 define Package/amd64-microcode/install
-	$(INSTALL_DIR) $(1)/lib/firmware/amd-ucode
-	$(CP) \
-		$(PKG_BUILD_DIR)/amd-ucode/*.bin \
-		$(1)/lib/firmware/amd-ucode
+	mkdir -p $(PKG_BUILD_DIR)/amd-ucode/kernel/x86/microcode
+	cat $(PKG_BUILD_DIR)/amd-ucode/*.bin > $(PKG_BUILD_DIR)/amd-ucode/kernel/x86/microcode/AuthenticAMD.bin
+	(cd $(PKG_BUILD_DIR)/amd-ucode;\
+		echo kernel/x86/microcode/AuthenticAMD.bin | cpio -o -H newc --reproducible > amd-ucode.cpio)
+	$(INSTALL_DIR) $(1)/boot
+	$(INSTALL_DATA) $(PKG_BUILD_DIR)/amd-ucode/amd-ucode.cpio $(1)/boot/amd-ucode.img
 endef
 
 $(eval $(call BuildPackage,amd64-microcode))
--- a/target/linux/x86/base-files/lib/preinit/02_load_x86_ucode
+++ /dev/null
@@ -1,9 +0,0 @@
-# Copyright (C) 2018 OpenWrt.org
-
-do_load_x86_ucode() {
-	if [ -e "/sys/devices/system/cpu/microcode/reload" ]; then
-		echo 1 > /sys/devices/system/cpu/microcode/reload
-	fi
-}
-
-boot_hook_add preinit_main do_load_x86_ucode
--- a/target/linux/x86/image/grub-efi.cfg
+++ b/target/linux/x86/image/grub-efi.cfg
@@ -6,7 +6,8 @@ set timeout="@TIMEOUT@"
 search -l kernel -s root
 
 menuentry "@TITLE@" {
-	linux /boot/vmlinuz @GPT_ROOTPART@ @CMDLINE@ noinitrd
+	linux /boot/vmlinuz @GPT_ROOTPART@ @CMDLINE@
+	initrd /boot/amd-ucode.img /boot/intel-ucode.img
 }
 menuentry "@TITLE@ (failsafe)" {
 	linux /boot/vmlinuz failsafe=true @GPT_ROOTPART@ @CMDLINE@ noinitrd
--- a/target/linux/x86/image/grub-iso.cfg
+++ b/target/linux/x86/image/grub-iso.cfg
@@ -11,5 +11,6 @@ else
 fi
 
 menuentry "@TITLE@" {
-	linux /boot/vmlinuz root=/dev/sr0 rootfstype=iso9660 rootwait @CMDLINE@ noinitrd
+	linux /boot/vmlinuz root=/dev/sr0 rootfstype=iso9660 rootwait @CMDLINE@
+	initrd /boot/amd-ucode.img /boot/intel-ucode.img
 }
--- a/target/linux/x86/image/grub-pc.cfg
+++ b/target/linux/x86/image/grub-pc.cfg
@@ -6,7 +6,8 @@ set timeout="@TIMEOUT@"
 set root='(hd0,msdos1)'
 
 menuentry "@TITLE@" {
-	linux /boot/vmlinuz @ROOTPART@ @CMDLINE@ noinitrd
+	linux /boot/vmlinuz @ROOTPART@ @CMDLINE@
+	initrd /boot/amd-ucode.img /boot/intel-ucode.img
 }
 menuentry "@TITLE@ (failsafe)" {
 	linux /boot/vmlinuz failsafe=true @ROOTPART@ @CMDLINE@ noinitrd
