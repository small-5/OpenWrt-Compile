#!/usr/bin/lua
local fs = require "nixio.fs"
local ucursor=require "luci.model.uci".cursor()
local json=require "luci.jsonc"
local server_section=arg[1]
local proto=arg[2]
local local_port=arg[3]
local socks_port=arg[4]
local ip_addr=arg[5]
local udp_addr=arg[6] or "127.0.0.1"
local server=ucursor:get_all("overwall",server_section)
local tls_host=server.tls_host or server.http_host or server.ws_host or server.h2_host or server.httpupgrade_host or server.splithttp_host or server.server
local user_agent=server.ws_ua or server.httpupgrade_ua or server.splithttp_ua or "Mozilla/5.0 (iPhone; CPU iPhone OS 17_4_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4.1 Mobile/15E148 Safari/604.1"
if server.tls=='1' then server.security="zero" end
local function get_domain_excluded()
	local content = fs.readfile("/etc/overwall/excluded.list")
	if not content then return nil end
	local hosts = {}
	string.gsub(content, '[^' .. "\n" .. ']+', function(w)
		local s = w:gsub("^%s*(.-)%s*$", "%1") -- Trim
		if s == "" then return end
		if s:find("#") and s:find("#") == 1 then return end
		if not s:find("#") or s:find("#") ~= 1 then table.insert(hosts, s) end
	end)
	if #hosts == 0 then hosts = nil end
	return hosts
end
local function get_domain_direct()
	local content = fs.readfile("/etc/overwall/direct.list")
	if not content then return nil end
	local hosts = {}
	string.gsub(content, '[^' .. "\n" .. ']+', function(w)
		local s = w:gsub("^%s*(.-)%s*$", "domain:%1") -- Trim
		if s == "" then return end
		if s:find("#") and s:find("#") == 1 then return end
		if not s:find("#") or s:find("#") ~= 1 then table.insert(hosts, s) end
	end)
	if #hosts == 0 then hosts = nil end
	return hosts
end
local Xray={
inbounds={(local_port~="0") and {
	port=tonumber(local_port),
	protocol="dokodemo-door",
	settings={
		network=proto,
		followRedirect=true
	},
	sniffing={
		enabled=true,
		destOverride={"http","tls"},
		domainsExcluded=get_domain_excluded()
	}
} or nil,
(socks_port~="0") and {
	port=tonumber(socks_port),
	protocol="socks",
	settings={
		auth="noauth",
		udp=true,
		ip=udp_addr
	},
	sniffing={
		enabled=true,
		destOverride={"http","tls"},
		domainsExcluded=get_domain_excluded()
	}
} or nil},
outbounds={
(server.type=="vmess" or server.type=="vless") and {
	protocol=server.type,
	settings={
		vnext={{
			address=ip_addr,
			port=tonumber(server.server_port),
			users={{
				id=server.uuid,
				security=(server.type=="vmess") and server.security or nil,
				encryption=(server.type=="vless") and server.vless_encryption or nil,
				flow=server.vless_flow or nil
			}}
		}}
	},
	streamSettings={
		network=server.transport,
		security=(server.reality=='1') and "reality" or (server.tls=='1') and "tls" or nil,
		tlsSettings=(server.tls=='1') and {
			allowInsecure=(server.insecure=="1") and true or nil,
			fingerprint=server.fingerprint or "random",
			serverName=tls_host,
			certificates=(server.certificate=="1") and {{
				usage="verify",
				certificateFile=server.certpath
			}} or nil
		} or nil,
		realitySettings=(server.reality=='1') and {
			fingerprint=server.finger_real,
			serverName=tls_host,
			publicKey=server.publickey,
			shortId=server.shortid or nil,
			spiderX=server.spiderx or nil
		} or nil,
		tcpSettings=(server.transport=="tcp" and server.tcp_guise=="http") and {
			header={
				type=server.tcp_guise,
				request={
					path={server.http_path} or {"/"},
					headers={Host=server.http_host or server.server}
				} or nil,
			}
		} or nil,
		kcpSettings=(server.transport=="kcp") and {
			mtu=tonumber(server.mtu),
			tti=tonumber(server.tti),
			uplinkCapacity=tonumber(server.uplink_capacity),
			downlinkCapacity=tonumber(server.downlink_capacity),
			congestion=(server.congestion=="1") and true or false,
			readBufferSize=tonumber(server.read_buffer_size),
			writeBufferSize=tonumber(server.write_buffer_size),
			header={
				type=server.kcp_guise
			},
			seed=server.seed or nil
		} or nil,
		wsSettings=(server.transport=="ws") and {
			path=server.ws_path,
			headers={
				Host=server.ws_host or server.server,
				UA=user_agent
			}
		} or nil,
		httpSettings=(server.transport=="h2") and {
			path=server.h2_path,
			host={server.h2_host or server.server}
		} or nil,
		quicSettings=(server.transport=="quic") and {
			security=server.quic_security,
			key=server.quic_key,
			header={
				type=server.quic_guise
			}
		} or nil,
		grpcSettings=(server.transport=="grpc") and {
			serviceName=server.grpc_serviceName,
			authority=server.grpc_authority or server.server
		} or nil,
		httpupgradeSettings=(server.transport=="httpupgrade") and {
			path=server.httpupgrade_path,
			host=server.httpupgrade_host or server.server,
			headers={
				UA=user_agent
			}
		} or nil,
		splithttpSettings =(server.transport=="splithttp") and {
			path=server.splithttp_path,
			host=server.splithttp_host or server.server,
			headers={
				UA=user_agent
			},
			maxUploadSize=server.splithttp_maxupload,
			maxConcurrentUploads=server.splithttp_maxconupload,
			scMinPostsIntervalMs=server.splithttp_scmin
		} or nil
	},
	mux=(server.mux=="1") and {
		enabled=true,
		concurrency=tonumber(server.concurrency)
	} or nil
} or (server.type=="ss") and {
	protocol="shadowsocks",
	settings={
		servers={{
			address=ip_addr,
			port=tonumber(server.server_port),
			method=server.encrypt_method_ss,
			password=server.password
		}}
	}
},{
	protocol="freedom",
	tag="Direct",
	settings={domainStrategy="UseIPv6v4"},
	streamSettings={
		sockopt={mark=1912}
	}
}
},
routing=(get_domain_direct()~=nil) and {
	rules={{
		type="field",
		inboundTag="dns",
		outboundTag="Direct",
	},{
		type="field",
		outboundTag="Direct",
		domain=get_domain_direct()
}}
} or nil,
dns=(get_domain_direct()~=nil) and {
	servers={{
		address="127.0.0.1",
		port=5336
	}},
	tag="dns"
} or nil,
}
Xray=json.stringify(Xray,1):gsub("%s+null,",""):gsub("\\/","/"):gsub("\\\\","\\"):gsub("UA\": ","User-Agent\": ")
print(Xray)
