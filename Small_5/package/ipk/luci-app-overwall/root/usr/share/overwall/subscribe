#!/usr/bin/lua
require "luci.model.uci"
require "nixio"
require "luci.util"
SYS=require "luci.sys"
require "luci.jsonc"
local tinsert=table.insert
local ssub,slen,schar,sbyte,sformat,sgsub=string.sub,string.len,string.char,string.byte,string.format,string.gsub
local jsonParse,jsonStringify=luci.jsonc.parse,luci.jsonc.stringify
local b64decode=nixio.bin.b64decode
local cache={}
local nodeResult=setmetatable({},{__index=cache})
local name='overwall'
local uciType='servers'
local ucic=luci.model.uci.cursor()
local proxy=ucic:get_first(name,'server_subscribe','proxy','0')
local switch=ucic:get_first(name,'server_subscribe','switch','0')
local subscribe_url=ucic:get_first(name,'server_subscribe','subscribe_url',{})
local filter_words=ucic:get_first(name,'server_subscribe','filter_words','过期时间/剩余流量')
local filter_mode=ucic:get_first(name,'server_subscribe','filter_mode','0')
local log=function(...)
	local file=io.open("/tmp/overwall.log","a")
	io.output(file)
	io.write(os.date("%Y-%m-%d %H:%M:%S ").."Subscribe       : "..table.concat({...}," ").."\n")
	io.close(file)
end

local function split(full,sep)
	if full then
		full=full:gsub("%z","") -- 這里不是很清楚 有時候結尾帶個\0
		local off,result=1,{}
		while true do
			local nStart,nEnd=full:find(sep,off)
			if not nEnd then
				local res=ssub(full,off,slen(full))
				if #res > 0 then -- 過濾掉 \0
					tinsert(result,res)
				end
				break
			else
				tinsert(result,ssub(full,off,nStart-1))
				off=nEnd+1
			end
		end
		return result
	end
	return {}
end

local function get_urlencode(c)
	return sformat("%%%02X",sbyte(c))
end

local function urlEncode(szText)
	local str=szText:gsub("([^0-9a-zA-Z ])",get_urlencode)
	str=str:gsub(" ","+")
	return str
end

local function get_urldecode(h) return schar(tonumber(h,16)) end
local function UrlDecode(szText)
	return (szText and szText:gsub("+"," "):gsub("%%(%x%x)",get_urldecode)) or nil
end

local function trim(text)
	if not text or text=="" then return "" end
	return (sgsub(text,"^%s*(.-)%s*$","%1"))
end

local function md5(content)
	local stdout=SYS.exec('echo \"'..urlEncode(content)..'\" | md5sum | cut -d \" \" -f1')
	return trim(stdout)
end

local function base64Decode(text)
	local raw=text
	if not text then return '' end
	text=text:gsub("%z","")
	text=text:gsub("_","/")
	text=text:gsub("-","+")
	local mod4=#text % 4
	text=text..string.sub('====',mod4+1)
	local result=b64decode(text)
	if result then
		return result:gsub("%z","")
	else
		return raw
	end
end

local function parseNodeUrl(A,B)
	local alias=""
	if B:find("#") then
		local idx_sp=B:find("#")
		alias=B:sub(idx_sp+1,-1)
		B=B:sub(0,idx_sp-1)
	end
	local Info=split(B,"@")
	result.alias=UrlDecode(alias)
	result.type=A
	result.uuid=UrlDecode(Info[1])
	local port="443"
	Info[2]=(Info[2] or ""):gsub("/%?","?")
	local hostInfo=nil
	if Info[2]:find(":") then
		hostInfo=split(Info[2],":")
		result.server=hostInfo[1]
		local idx_port=2
		if hostInfo[2]:find("?") then
			hostInfo=split(hostInfo[2],"?")
			idx_port=1
		end
		if hostInfo[idx_port] ~= "" then port=hostInfo[idx_port] end
	else
		if Info[2]:find("?") then
			hostInfo=split(Info[2],"?")
		end
		result.server=hostInfo and hostInfo[1] or Info[2]
	end
	local query=split(Info[2],"?")
	local params={}
	for _,v in pairs(split(query[2],'&')) do
		local t=split(v,'=')
		params[t[1]]=UrlDecode(t[2])
	end
	if not params.type then
		params.type="tcp"
	end
	if params.type=='ws' then
		result.ws_host=params.host
		result.ws_path=params.path
	elseif params.type=='h2' then
		result.h2_host=params.host
		result.h2_path=params.path
	elseif params.type=='tcp' then
		result.tcp_guise=params.headerType or "none"
		result.http_host=params.host
		result.http_path=params.path
	elseif params.type=='kcp' or params.type=='mkcp' then
		params.type="kcp"
		result.kcp_guise=params.headerType or "none"
		result.mtu=1350
		result.tti=50
		result.uplink_capacity=5
		result.downlink_capacity=20
		result.read_buffer_size=2
		result.write_buffer_size=2
		result.seed=params.seed and params.seed
	elseif params.type=='quic' then
		result.quic_guise=params.headerType or "none"
		result.quic_key=params.key
		result.quic_security=params.quicSecurity or "none"
	elseif params.type=='grpc' then
		result.grpc_serviceName=params.serviceName
	end
	result.transport=params.type
	if A=="vmess" then
		result.security=params.encryption and params.encryption
	else
		result.vless_encryption=params.encryption or "none"
	end
	if params.security=="tls" or params.security=="xtls" then
		if params.security=="tls" then
			result.tls="1"
		else
			result.xtls="1"
			result.vless_flow=params.flow or "xtls-rprx-direct"
		end
		result.tls_host=params.sni and params.sni
	end
	result.server_port=port
end

local function processData(szType,content)
	result={type=szType}
	if szType=='ssr' then
		local dat=split(content,"/%?")
		local hostInfo=split(dat[1],':')
		result.server=hostInfo[1]
		result.server_port=hostInfo[2]
		result.protocol=hostInfo[3]
		result.encrypt_method=hostInfo[4]
		result.obfs=hostInfo[5]
		result.password=base64Decode(hostInfo[6])
		local params={}
		for _,v in pairs(split(dat[2],'&')) do
			local t=split(v,'=')
			params[t[1]]=t[2]
		end
		result.obfs_param=base64Decode(params.obfsparam)
		result.protocol_param=base64Decode(params.protoparam)
		local group=base64Decode(params.group)
		result.alias=""
		if group then result.alias="["..group.."] " end
		result.alias=result.alias..base64Decode(params.remarks)
	elseif szType=="ss" then
		local idx_sp=0
		local alias=""
		if content:find("#") then
			idx_sp=content:find("#")
			alias=content:sub(idx_sp+1,-1)
		end
		local info=content:sub(1,idx_sp-1)
		local hostInfo=split(base64Decode(info),"@")
		local hostInfoLen=#hostInfo
		if hostInfoLen > 2 then
			host=split(hostInfo[hostInfoLen],":")
			userinfo={}
			for i=1,hostInfoLen-1 do
				tinsert(userinfo,hostInfo[i])
			end
			userinfo=table.concat(userinfo,'@')
		else
			host=split(hostInfo[2],":")
			userinfo=base64Decode(hostInfo[1])
		end
		local method=userinfo:sub(1,userinfo:find(":")-1)
		local password=userinfo:sub(userinfo:find(":")+1,#userinfo)
		result.alias=UrlDecode(alias)
		result.server=host[1]
		if host[2]:find("/%?") then
			local query=split(host[2],"/%?")
			result.server_port=query[1]
			local params={}
			for _,v in pairs(split(query[2],'&')) do
				local t=split(v,'=')
				params[t[1]]=t[2]
			end
			if params.plugin then
				local plugin_info=UrlDecode(params.plugin)
				local idx_pn=plugin_info:find(";")
				if idx_pn then
					result.plugin=plugin_info:sub(1,idx_pn-1)
					result.plugin_opts=plugin_info:sub(idx_pn+1,#plugin_info)
				else
					result.plugin=plugin_info
				end
			end
			if result.plugin=="simple-obfs" then
				result.plugin="obfs-local"
			end
		else
			result.server_port=host[2]
		end
		result.encrypt_method_ss=method
		result.password=password
	elseif szType=="ssd" then
		result.type="ss"
		result.server=content.server
		result.server_port=content.port
		result.password=content.password
		result.encrypt_method_ss=content.encryption
		result.plugin=content.plugin
		result.plugin_opts=content.plugin_options
		result.alias="["..content.airport.."] "..content.remarks
	elseif szType=="trojan" then
		local alias=""
		if content:find("#") then
			local idx_sp=content:find("#")
			alias=content:sub(idx_sp+1,-1)
			content=content:sub(0,idx_sp-1)
		end
		if content:find("@") then
			result.alias=UrlDecode(alias)
			local Info=split(content,"@")
			result.password=UrlDecode(Info[1])
			local port="443"
			Info[2]=(Info[2] or ""):gsub("/%?","?")
			local hostInfo=nil
			if Info[2]:find(":") then
				hostInfo=split(Info[2],":")
				result.server=hostInfo[1]
				local idx_port=2
				if hostInfo[2]:find("?") then
					hostInfo=split(hostInfo[2],"?")
					idx_port=1
				end
				if hostInfo[idx_port] ~= "" then port=hostInfo[idx_port] end
			else
				if Info[2]:find("?") then
					hostInfo=split(Info[2],"?")
				end
				result.server=hostInfo and hostInfo[1] or Info[2]
			end
			local query=split(Info[2],"?")
			local params={}
			for _,v in pairs(split(query[2],'&')) do
				local t=split(v,'=')
				params[string.lower(t[1])]=UrlDecode(t[2])
			end
			if params.peer or params.sni then
				result.tls='1'
				result.tls_host=params.peer or params.sni
			end
			result.insecure=params.allowinsecure=='1' and '1'
			result.server_port=port
		end
	elseif szType=='vmess' then
		local info=jsonParse(content)
		if info then
			result.server=info.add
			result.server_port=info.port
			result.transport=info.net
			result.alter_id=info.aid
			result.uuid=info.id
			result.alias=info.ps
			if info.net=='ws' then
				result.ws_host=info.host
				result.ws_path=info.path
			elseif info.net=='h2' then
				result.h2_host=info.host
				result.h2_path=info.path
			elseif info.net=='tcp' then
				if info.type and info.type~="http" then
					info.type="none"
				end
				result.tcp_guise=info.type
				result.http_host=info.host
				result.http_path=info.path
			elseif info.net=='kcp' or info.net=='mkcp' then
				result.transport='kcp'
				result.kcp_guise=info.type
				result.mtu=1350
				result.tti=50
				result.uplink_capacity=5
				result.downlink_capacity=20
				result.read_buffer_size=2
				result.write_buffer_size=2
			elseif info.net=='quic' then
				result.quic_guise=info.type
				result.quic_key=info.key
				result.quic_security=info.securty
			elseif info.net=='grpc' then
				result.grpc_serviceName=info.serviceName
			end
			if info.security then result.security=info.security end
			if info.tls=="tls" or info.tls=="1" then
				result.tls="1"
				result.tls_host=info.sni
				result.insecure=1
			end
		else
			if content:find("@")==37 then
				parseNodeUrl(szType,content)
			else
				log('不支持非JSON+Base64類型的VMESS節點訂閱，跳過此節點。')
				return nil
			end
		end
	elseif szType=="vless" then
		if content:find("@") then
			parseNodeUrl(szType,content)
		else
			log('不支持Base64類型的VLESS節點訂閱，跳過此節點。')
			return nil
		end
	else
		log('暫時不支持'..szType..'類型的節點訂閱，跳過此節點。')
		return nil
	end
	if not result.alias then
		if result.server and result.server_port then
			result.alias=result.server..':'..result.server_port
		else
			result.alias="NULL"
		end
	end
	local switch_enable=result.switch_enable
	result.switch_enable=nil
	result.hashkey=md5(jsonStringify(result))
	result.switch_enable=switch_enable
	return result
end

local function curl(url)
	local stdout=SYS.exec('curl --retry 3 -Lfsm 10 "'..url..'"')
	return trim(stdout)
end

local function check_filer(result)
	local filter_word=split(filter_words,"/")
	for i,v in pairs(filter_word) do
		if result.alias:find(v) then
			return filter_mode=='0'
		end
	end
	return filter_mode=='1'
end

local function parse_link()
	local i=0
	if proxy=='0' then
		log('服務正在暫停')
		SYS.init.stop(name)
	end
	for k,url in ipairs(subscribe_url) do
		i=i+1
		local raw=curl(url)
		if #raw > 0 then
			log('----------------------------------------------------------------------------------------------------------')
			log('解析第'..i..'個鏈接:')
			local nodes,szType
			local num=0
			local groupHash=md5(url)
			cache[groupHash]={}
			tinsert(nodeResult,{})
			local index=#nodeResult
			if raw:find('ssd://') then
				szType='ssd'
				local nEnd=select(2,raw:find('ssd://'))
				nodes=base64Decode(raw:sub(nEnd+1,#raw))
				nodes=jsonParse(nodes)
				local extra={airport=nodes.airport,port=nodes.port,encryption=nodes.encryption,password=nodes.password}
				local servers={}
				for _,server in ipairs(nodes.servers) do
					tinsert(servers,setmetatable(server,{__index=extra}))
				end
				nodes=servers
			else
				nodes=split(base64Decode(raw):gsub(" ","\n"),"\n")
			end
			for _,v in ipairs(nodes) do
				if v then
					local result
					if szType=='ssd' then
						result=processData(szType,v)
					elseif not szType then
						local node=trim(v)
						local dat=split(node,"://")
						if dat and dat[1] and dat[2] then
							if dat[1]=='ss' or dat[1]=='trojan' then
								result=processData(dat[1],dat[2])
							else
								result=processData(dat[1],base64Decode(dat[2]))
							end
						end
					else
						log('跳過未知類型: '..szType)
					end
					if result then
						if not result.server or not result.server_port or result.alias=="NULL" or check_filer(result) or result.server:match("[^0-9a-zA-Z%-%.%s]") then
							num=num+1
							log('丟棄無效節點: '..result.type..' 節點: '..result.alias)
						else
							result.grouphashkey=groupHash
							tinsert(nodeResult[index],result)
							cache[groupHash][result.hashkey]=nodeResult[index][#nodeResult[index]]
						end
					else
						num=num+1
					end
				end
			end
			log('第'..i..'個鏈接成功解析節點數量: '..#nodes-num)
		else
			log('第'..i..'個鏈接獲取內容為空')
		end
	end
end

local execute=function()
	parse_link()
	log('----------------------------------------------------------------------------------------------------------')
	if next(nodeResult)==nil then
		log('更新失敗，沒有可用的節點')
		if proxy=='0' then
			SYS.init.start(name)
			log('訂閱失敗，恢覆服務')
		end
		return
	end
	local add,del=0,0
	ucic:foreach(name,uciType,function(old)
		if old.grouphashkey or old.hashkey then -- 沒有 hash 的不參與刪除
			if not nodeResult[old.grouphashkey] or not nodeResult[old.grouphashkey][old.hashkey] then
				ucic:delete(name,old['.name'])
				del=del+1
			else
				local dat=nodeResult[old.grouphashkey][old.hashkey]
				ucic:tset(name,old['.name'],dat)
				setmetatable(nodeResult[old.grouphashkey][old.hashkey],{__index={_ignore=true}})
			end
		else
			if not old.alias then
				if old.server or old.server_port then
					old.alias=old.server..':'..old.server_port
					log('忽略手動添加的節點: '..old.alias)
				else
					ucic:delete(name,old['.name'])
				end
			else
				log('忽略手動添加的節點: '..old.alias)
			end
		end
	end)
	for k,v in ipairs(nodeResult) do
		for kk,vv in ipairs(v) do
			if not vv._ignore then
				local section=ucic:add(name,uciType)
				ucic:tset(name,section,vv)
				ucic:set(name,section,"switch_enable",switch)
				add=add+1
			end
		end
	end
	local globalServer=ucic:get_first(name,'global','global_server')
	if globalServer then
		if ucic:get_first(name,uciType) then
			if not ucic:get(name,globalServer) then
				SYS.call("touch /var/lock/overwall-uci.lock")
				ucic:commit(name)
				ucic:set(name,ucic:get_first(name,'global'),'global_server',ucic:get_first(name,uciType))
				C='1'
				log('當前主伺服器節點已被刪除，正在自動更換為第一個節點。')
			else
				log('維持當前主伺服器節點。')
			end
		else
			ucic:delete(name,ucic:get_first(name,'global'),'global_server')
			ucic:delete(name,ucic:get_first(name,'global'),'udp_relay_server')
			ucic:delete(name,ucic:get_first(name,'global'),'yb_server')
			ucic:delete(name,ucic:get_first(name,'global'),'nf_server')
			ucic:delete(name,ucic:get_first(name,'global'),'cu_server')
			ucic:delete(name,ucic:get_first(name,'global'),'tg_server')
			log('沒有伺服器節點了，停止服務')
			SYS.call("/etc/init.d/overwall stop > /dev/null 2>&1 &")
		end
	end
	SYS.call("touch /var/lock/overwall-uci.lock")
	ucic:commit(name)
	if proxy=='0' or C then
		SYS.call("/etc/init.d/overwall restart > /dev/null 2>&1 &")
	end
	log('新增節點數量: '..add,'刪除節點數量: '..del)
	log('訂閱更新成功')
end

if subscribe_url and #subscribe_url > 0 then
	if SYS.call('curl -so /dev/null -m 5 www.163.com')~=0 then
		log("網路不通，停止更新訂閱")
		return
	end
	xpcall(execute,function(e)
		log(e)
		log(debug.traceback())
		log('發生錯誤,正在恢覆服務')
		if ucic:get_first(name,uciType) then
			SYS.call("/etc/init.d/overwall restart > /dev/null 2>&1 &")
			log('重啟服務成功')
		else
			SYS.call("/etc/init.d/overwall stop > /dev/null 2>&1 &")
			log('停止服務成功')
		end
	end)
end
