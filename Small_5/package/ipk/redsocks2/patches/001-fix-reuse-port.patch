--- a/Makefile
+++ b/Makefile
@@ -22,9 +22,6 @@ override CFLAGS += -D_BSD_SOURCE -D_DEFAULT_SOURCE -Wall
 ifeq ($(OS), Linux)
 override CFLAGS += -std=c99 -D_XOPEN_SOURCE=600
 endif
-ifeq ($(OS), FreeBSD)
-override CFLAGS +=-I/usr/local/include -L/usr/local//lib
-endif
 ifeq ($(OS), Darwin)
 override CFLAGS +=-I/usr/local/opt/openssl/include -L/usr/local/opt/openssl/lib
 SHELL := /bin/bash

--- a/base.c
+++ b/base.c
@@ -57,7 +57,6 @@
 #include "main.h"
 #include "parser.h"
 #include "redsocks.h"
-#include "utils.h"
 
 typedef struct redirector_subsys_t {
 	int (*init)();
@@ -131,7 +130,7 @@ static int getdestaddr_ipf(int fd,
 	struct sockaddr_storage *destaddr)
 {
 	int natfd = instance.redirector->private;
-	struct natlookup nl;
+	struct natlookup natLookup;
 	int x;
 #if defined(IPFILTER_VERSION) && (IPFILTER_VERSION >= 4000027)
 	struct ipfobj obj;
@@ -141,17 +140,17 @@ static int getdestaddr_ipf(int fd,
 
 #if defined(IPFILTER_VERSION) && (IPFILTER_VERSION >= 4000027)
 	obj.ipfo_rev = IPFILTER_VERSION;
-	obj.ipfo_size = sizeof(nl);
-	obj.ipfo_ptr = &nl;
+	obj.ipfo_size = sizeof(natLookup);
+	obj.ipfo_ptr = &natLookup;
 	obj.ipfo_type = IPFOBJ_NATLOOKUP;
 	obj.ipfo_offset = 0;
 #endif
 
-	nl.nl_inport = ((struct sockaddr_in *)bindaddr)->sin_port;
-	nl.nl_outport = ((struct sockaddr_in *)client)->sin_port;
-	nl.nl_inip = ((struct sockaddr_in *)bindaddr)->sin_addr;
-	nl.nl_outip = ((struct sockaddr_in *)client)->sin_addr;
-	nl.nl_flags = IPN_TCP;
+	natLookup.nl_inport = bindaddr->sin_port;
+	natLookup.nl_outport = client->sin_port;
+	natLookup.nl_inip = bindaddr->sin_addr;
+	natLookup.nl_outip = client->sin_addr;
+	natLookup.nl_flags = IPN_TCP;
 #if defined(IPFILTER_VERSION) && (IPFILTER_VERSION >= 4000027)
 	x = ioctl(natfd, SIOCGNATL, &obj);
 #else
@@ -163,10 +162,10 @@ static int getdestaddr_ipf(int fd,
 	 * this seems simpler.
 	 */
 	if (63 == siocgnatl_cmd) {
-		struct natlookup *nlp = &nl;
+		struct natlookup *nlp = &natLookup;
 		x = ioctl(natfd, SIOCGNATL, &nlp);
 	} else {
-		x = ioctl(natfd, SIOCGNATL, &nl);
+		x = ioctl(natfd, SIOCGNATL, &natLookup);
 	}
 #endif
 	if (x < 0) {
@@ -174,9 +173,9 @@ static int getdestaddr_ipf(int fd,
 			log_errno(LOG_WARNING, "ioctl(SIOCGNATL)\n");
 		return -1;
 	} else {
-		destaddr->ss_family = AF_INET;
-		((struct sockaddr_in *)destaddr)->sin_port = nl.nl_realport;
-		((struct sockaddr_in *)destaddr)->sin_addr = nl.nl_realip;
+		destaddr->sin_family = AF_INET;
+		destaddr->sin_port = natLookup.nl_realport;
+		destaddr->sin_addr = natLookup.nl_realip;
 		return 0;
 	}
 }
@@ -190,40 +189,20 @@ static int redir_init_pf()
 
 // FIXME: Support IPv6
 static int getdestaddr_pf(
-		int fd,
-		const struct sockaddr_storage *client,
-		const struct sockaddr_storage *bindaddr,
-		struct sockaddr_storage *destaddr)
+		int fd, const struct sockaddr_in *client, const struct sockaddr_in *bindaddr,
+		struct sockaddr_in *destaddr)
 {
 	int pffd = instance.redirector->private;
 	struct pfioc_natlook nl;
 	int saved_errno;
-    char clientaddr_str[RED_INET_ADDRSTRLEN], bindaddr_str[RED_INET_ADDRSTRLEN];
+	char clientaddr_str[INET6_ADDRSTRLEN], bindaddr_str[INET6_ADDRSTRLEN];
 
 	memset(&nl, 0, sizeof(struct pfioc_natlook));
-	if (client->ss_family == AF_INET) {
-		nl.saddr.v4 = ((const struct sockaddr_in *)client)->sin_addr;
-		nl.sport = ((struct sockaddr_in *)client)->sin_port;
-	}
-	else if (client->ss_family == AF_INET6) {
-		memcpy(&nl.saddr.v6, &((const struct sockaddr_in6 *)client)->sin6_addr, sizeof(struct in6_addr));
-		nl.sport = ((struct sockaddr_in6 *)client)->sin6_port;
-	}
-	else {
-		goto fail;
-	}
-	if (bindaddr->ss_family == AF_INET) {
-		nl.daddr.v4 = ((const struct sockaddr_in *)bindaddr)->sin_addr;
-		nl.dport = ((struct sockaddr_in *)bindaddr)->sin_port;
-	}
-	else if (bindaddr->ss_family == AF_INET6) {
-		memcpy(&nl.daddr.v6, &((const struct sockaddr_in6 *)bindaddr)->sin6_addr, sizeof(struct in6_addr));
-		nl.dport = ((struct sockaddr_in6 *)bindaddr)->sin6_port;
-	}
-	else {
-		goto fail;
-	}
-	nl.af = client->ss_family;  // Use same address family ass client
+	nl.saddr.v4addr.s_addr = client->sin_addr.s_addr;
+	nl.sport = client->sin_port;
+	nl.daddr.v4addr.s_addr = bindaddr->sin_addr.s_addr;
+	nl.dport = bindaddr->sin_port;
+	nl.af = AF_INET;
 	nl.proto = IPPROTO_TCP;
 	nl.direction = PF_OUT;
 
@@ -238,24 +217,21 @@ static int getdestaddr_pf(
 			goto fail;
 		}
 	}
-	destaddr->ss_family = nl.af;
-	if (nl.af == AF_INET) {
-		((struct sockaddr_in *)destaddr)->sin_port = nl.rdport;
-		((struct sockaddr_in *)destaddr)->sin_addr = nl.rdaddr.v4;
-	}
-	else {
-		((struct sockaddr_in6 *)destaddr)->sin6_port = nl.rdport;
-		memcpy(&(((struct sockaddr_in6 *)destaddr)->sin6_addr), &nl.rdaddr.v6, sizeof(struct in6_addr));
-	}
+	destaddr->sin_family = AF_INET;
+	destaddr->sin_port = nl.rdport;
+	destaddr->sin_addr = nl.rdaddr.v4addr;
 	return 0;
 
 fail:
 	saved_errno = errno;
-	red_inet_ntop(client, clientaddr_str, sizeof(clientaddr_str));
-	red_inet_ntop(bindaddr, bindaddr_str, sizeof(bindaddr_str));
+	if (!inet_ntop(client->sin_family, &client->sin_addr, clientaddr_str, sizeof(clientaddr_str)))
+		strncpy(clientaddr_str, "???", sizeof(clientaddr_str));
+	if (!inet_ntop(bindaddr->sin_family, &bindaddr->sin_addr, bindaddr_str, sizeof(bindaddr_str)))
+		strncpy(bindaddr_str, "???", sizeof(bindaddr_str));
+
 	errno = saved_errno;
-	log_errno(LOG_WARNING, "ioctl(DIOCNATLOOK {src=%s, dst=%s})",
-			  clientaddr_str, bindaddr_str);
+	log_errno(LOG_WARNING, "ioctl(DIOCNATLOOK {src=%s:%d, dst=%s:%d})",
+			  clientaddr_str, ntohs(nl.sport), bindaddr_str, ntohs(nl.dport));
 	return -1;
 }
 #endif

--- a/redsocks.c
+++ b/redsocks.c
@@ -998,10 +998,10 @@ static int redsocks_init_instance(redsocks_instance *instance)
     if (make_socket_transparent(fd))
         log_error(LOG_WARNING, "Continue without TPROXY support");
 
-//    if (apply_reuseport(fd))
-//        log_error(LOG_WARNING, "Continue without SO_REUSEPORT enabled");
+    if (apply_reuseport(fd))
+        log_error(LOG_WARNING, "Continue without SO_REUSEPORT enabled");
 
-#if defined(__APPLE__) || defined(__FreeBSD__)
+#ifdef __APPLE__
     bindaddr_len = instance->config.bindaddr.ss_len > 0 ? instance->config.bindaddr.ss_len : sizeof(instance->config.bindaddr);
 #else
     bindaddr_len = sizeof(instance->config.bindaddr);

--- a/redudp.c
+++ b/redudp.c
@@ -620,7 +620,7 @@ static int redudp_init_instance(redudp_instance *instance)
     if (apply_reuseport(fd))
         log_error(LOG_WARNING, "Continue without SO_REUSEPORT enabled");
 
-#if defined(__APPLE__) || defined(__FreeBSD__)
+#ifdef __APPLE__
     bindaddr_len = instance->config.bindaddr.ss_len > 0 ? instance->config.bindaddr.ss_len : sizeof(instance->config.bindaddr);
 #else
     bindaddr_len = sizeof(instance->config.bindaddr);

--- a/tcpdns.c
+++ b/tcpdns.c
@@ -463,7 +463,7 @@ static int tcpdns_init_instance(tcpdns_instance *instance)
     if (apply_reuseport(fd))
         log_error(LOG_WARNING, "Continue without SO_REUSEPORT enabled");
 
-#if defined(__APPLE__) || defined(__FreeBSD__)
+#ifdef __APPLE__
     bindaddr_len = instance->config.bindaddr.ss_len > 0 ? instance->config.bindaddr.ss_len : sizeof(instance->config.bindaddr);
 #else
     bindaddr_len = sizeof(instance->config.bindaddr);
